#!/usr/bin/env node
/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require('debug')('gameapi:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
//console.log(port) // returns: 8080

/**
 * Create HTTP server.|
 */

var server = http.createServer(app);

/* Socket  */
const main = require('../chatbot/openai-chatbot');
//const createDOMPurify = require('dompurify');
//const cors = require('cors');
//const { JSDOM } = require('jsdom');
const { Server } = require('socket.io');
const io = new Server(server, {
  cors: {
    //origin: "*",
    origin: "https://erwinmarte.netlify.app",
    methods: ["GET", "POST"],
    allowedHeaders: ["Content-Type", "Authorization"]
  }
});
io.on('connection', (socket) => {
  console.log('Nuevo cliente conectado');

  socket.on('chat message', (message) => {
    if (!message) {
        io.emit('chat message', 'Error: Message is required');
        return;
    };
    
    //const DOMPurify = createDOMPurify(new JSDOM().window);
    //const sanitizedMessage = DOMPurify.sanitize(message);
    const sanitizedMessage =  message;
    const dangerousContent = ["&", "data:","vbscript:","eval()", "exec()"];
    const messages = sanitizedMessage.toLowerCase();
    const containsDangerousContent = dangerousContent.some(content => messages.includes(content));

    if (containsDangerousContent) {
        console.log('Mensaje malicioso detectado:', message);
        io.emit('chat message', 'Error: Message contains dangerous content');
        return;
    }else{
      
      main(sanitizedMessage)
        .then(response => {
            io.emit('chat message', response);
        })
        .catch(error => {
            console.error('Error en el chatbot:', error);
            io.emit('chat message', 'Error en el chatbot');
        });
    };
});

  socket.on('disconnect', () => {
      //console.log('Cliente desconectado');
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
};